{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAOC,SAASC,cAAc,QAC9BC,EAAaF,SAASC,cAAc,uBACpCE,EAAYH,SAASC,cAAc,sBACnCG,EAAcJ,SAASC,cAAc,wBA2B3C,SAASI,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACLH,EACFF,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CAIbR,EAAKgB,iBAAiB,UAtCHC,IACjBA,EAAMC,iBACN,IAAIC,EAASC,SAASf,EAAYgB,OAC9BC,EAAQF,SAASjB,EAAWkB,OAC5BE,EAAOH,SAAShB,EAAUiB,OAC9B,GAAIF,GAAU,GAAKG,EAAQ,GAAKC,EAAO,EACrCC,EAAA1B,GAAS2B,OAAOC,QAAQ,4CACY,CACpC,IAAK,IAAIC,EAAW,EAAGA,GAAYR,EAAQQ,GAAY,EACrDrB,EAAcqB,EAAUL,GAASK,EAAW,GAAKJ,GAC9CK,MAAK,EAACrB,SAAEA,EAAQC,MAAEA,MACjBgB,EAAA1B,GAAS2B,OAAOI,QACd,uBAAqBtB,QAAiBC,MAAU,IAGnDsB,OAAM,EAACC,EAAEA,EAACC,EAAEA,MACXR,EAAA1B,GAAS2B,OAAOC,QACd,sBAAoBC,QAAeL,MAAU,IAIrDtB,EAAKiC,O","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('form');\nconst inputDelay = document.querySelector('input[name=\"delay\"]');\nconst inputStep = document.querySelector('input[name=\"step\"]');\nconst inputAmount = document.querySelector('input[name=\"amount\"]');\n\nconst formSubmit = event => {\n  event.preventDefault();\n  let amount = parseInt(inputAmount.value);\n  let delay = parseInt(inputDelay.value);\n  let step = parseInt(inputStep.value);\n  if (amount <= 0 || delay < 0 || step < 0) {\n    Notiflix.Notify.failure(`❌ Всі данні повинні бути більше нуля`);\n  } else {\n    for (let position = 1; position <= amount; position += 1) {\n      createPromise(position, delay + (position - 1) * step)\n        .then(({ position, delay }) => {\n          Notiflix.Notify.success(\n            `✅ Fulfilled promise ${position} in ${delay}ms`\n          );\n        })\n        .catch(({ i, j }) => {\n          Notiflix.Notify.failure(\n            `❌ Rejected promise ${position} in ${delay}ms`\n          );\n        });\n    }\n    form.reset();\n  }\n};\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nform.addEventListener('submit', formSubmit);\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$form","document","querySelector","$47d4ff9957288465$var$inputDelay","$47d4ff9957288465$var$inputStep","$47d4ff9957288465$var$inputAmount","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","event","preventDefault","amount","parseInt","value","delay1","step","$parcel$interopDefault","Notify","failure","position1","then","success","catch","i","j","reset"],"version":3,"file":"03-promises.1b127f50.js.map"}