{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAOC,SAASC,cAAc,QAC9BC,EAAaF,SAASC,cAAc,uBACpCE,EAAYH,SAASC,cAAc,sBACnCG,EAAcJ,SAASC,cAAc,wBAwC3CF,EAAKM,iBAAiB,UAtCH,SAAAC,GACjBA,EAAMC,iBACN,IAAIC,EAASC,SAASL,EAAYM,OAC9BC,EAAQF,SAASP,EAAWQ,OAC5BE,EAAOH,SAASN,EAAUO,OAC9B,GAAIF,GAAU,GAAKG,EAAQ,GAAKC,EAAO,EACrCC,EAAAhB,GAASiB,OAAOC,QAAS,4CACW,CACpC,I,kBAiBJ,IAAuBC,EAAUC,GAAVD,EAhBHE,EAgBaD,EAhBHN,GAASO,EAAW,GAAKN,EAiB9C,IAAIO,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EACFF,EAAQ,CAAEJ,WAAUC,UAEpBI,EAAO,CAAEL,WAAUC,S,GAEpBA,E,KAxBES,MAAK,SAAAC,G,IAAGX,EAAQW,EAARX,SAAUC,EAAKU,EAALV,MACjBJ,EAAAhB,GAASiB,OAAOc,QACd,uBAAwCC,OAAfb,EAAS,QAAYa,OAANZ,EAAM,M,IAGjDa,OAAM,SAAAH,GAAIA,EAADI,EAAIJ,EAADK,EACXnB,EAAAhB,GAASiB,OAAOC,QACd,sBAAqCc,OAAfX,EAAS,QAAYW,OAANlB,EAAM,M,KAT1CsB,EAAW,EAAGA,GAAYzB,EAAQyB,GAAY,EAACC,EAAAD,GAaxDlC,EAAKoC,O","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('form');\nconst inputDelay = document.querySelector('input[name=\"delay\"]');\nconst inputStep = document.querySelector('input[name=\"step\"]');\nconst inputAmount = document.querySelector('input[name=\"amount\"]');\n\nconst formSubmit = event => {\n  event.preventDefault();\n  let amount = parseInt(inputAmount.value);\n  let delay = parseInt(inputDelay.value);\n  let step = parseInt(inputStep.value);\n  if (amount <= 0 || delay < 0 || step < 0) {\n    Notiflix.Notify.failure(`❌ Всі данні повинні бути більше нуля`);\n  } else {\n    for (let position = 1; position <= amount; position += 1) {\n      createPromise(position, delay + (position - 1) * step)\n        .then(({ position, delay }) => {\n          Notiflix.Notify.success(\n            `✅ Fulfilled promise ${position} in ${delay}ms`\n          );\n        })\n        .catch(({ i, j }) => {\n          Notiflix.Notify.failure(\n            `❌ Rejected promise ${position} in ${delay}ms`\n          );\n        });\n    }\n    form.reset();\n  }\n};\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nform.addEventListener('submit', formSubmit);\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$inputDelay","$ce04d3a99e08e73b$var$inputStep","$ce04d3a99e08e73b$var$inputAmount","addEventListener","event","preventDefault","amount","parseInt","value","delay1","step","$parcel$interopDefault","Notify","failure","position","delay","position1","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","then","param","success","concat","catch","i","j","position11","_loop","reset"],"version":3,"file":"03-promises.95b8779b.js.map"}